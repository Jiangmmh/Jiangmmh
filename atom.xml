<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Minghan&#39;s Blog</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="http://jiangmmh.github.io/atom.xml" rel="self"/>
  
  <link href="http://jiangmmh.github.io/"/>
  <updated>2023-11-05T06:53:24.000Z</updated>
  <id>http://jiangmmh.github.io/</id>
  
  <author>
    <name>Minghan Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DiffusionModel梳理</title>
    <link href="http://jiangmmh.github.io/2023/11/05/DiffusionModel%E6%A2%B3%E7%90%86/"/>
    <id>http://jiangmmh.github.io/2023/11/05/DiffusionModel%E6%A2%B3%E7%90%86/</id>
    <published>2023-11-05T06:53:24.000Z</published>
    <updated>2023-11-05T06:53:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DDPM"><a href="#DDPM" class="headerlink" title="DDPM"></a>DDPM</h2><p>两个过程——前向过程和反向过程，前向过程是一个高斯核马尔可夫链，实现对数据加噪：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">noise_images</span>(<span class="params">self, x, t</span>):   <span class="comment"># 扩散过程</span></span><br><span class="line">    sqrt_alpha_hat = torch.sqrt(self.alpha_hat[t])[:, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">    sqrt_one_minus_alpha_hat = torch.sqrt(<span class="number">1</span> - self.alpha_hat[t])[:, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">    Ɛ = torch.randn_like(x)</span><br><span class="line">    <span class="keyword">return</span> sqrt_alpha_hat * x + sqrt_one_minus_alpha_hat * Ɛ, Ɛ</span><br></pre></td></tr></table></figure><p>当正向过程中加入噪声的强度(方差$\beta_t$)足够小时，反向过程也是一个高斯核马尔可夫链，其参数有两个均值$\mu$和方差$\delta$，方差固定，用Unet预测均值，而经过进一步推导，将预测均值转化为预测噪声$\epsilon$，损失函数为MSE。数据生成过程为从先验分布（标准高斯分布）中采样，然后根据该马尔可夫链采样逐步降噪。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">self, model, n</span>):     <span class="comment"># Reverse Process</span></span><br><span class="line">    logging.info(<span class="string">f&quot;Sampling <span class="subst">&#123;n&#125;</span> new images....&quot;</span>)</span><br><span class="line">    model.<span class="built_in">eval</span>()    <span class="comment"># 测试模式，不启用Batch-Norm和Dropout</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        x = torch.randn((n, <span class="number">3</span>, self.img_size, self.img_size)).to(self.device) <span class="comment"># 产生噪声图</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, self.noise_steps)), position=<span class="number">0</span>): <span class="comment"># 从T~1</span></span><br><span class="line">            t = (torch.ones(n) * i).long().to(self.device)</span><br><span class="line">            predicted_noise = model(x, t)  <span class="comment"># 预测噪声</span></span><br><span class="line">            alpha = self.alpha[t][:, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">            alpha_hat = self.alpha_hat[t][:, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">            beta = self.beta[t][:, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">1</span>:</span><br><span class="line">                noise = torch.randn_like(x)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                noise = torch.zeros_like(x)</span><br><span class="line">            <span class="comment"># 高斯分布，前半部分为均值，后半部分为方差</span></span><br><span class="line">            x = <span class="number">1</span> / torch.sqrt(alpha) * (x - (beta / torch.sqrt(<span class="number">1</span> - alpha_hat)) * predicted_noise) + torch.sqrt(beta) * noise</span><br><span class="line">    <span class="comment"># 将输出变为图像</span></span><br><span class="line">    model.train()</span><br><span class="line">    x = (x.clamp(-<span class="number">1</span>, <span class="number">1</span>) + <span class="number">1</span>) / <span class="number">2</span>  <span class="comment"># clamp将x中的数据挤压在[-1, 1]，超出的值用边界代替</span></span><br><span class="line">    x = (x * <span class="number">255</span>).<span class="built_in">type</span>(torch.uint8)</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>所用的Unet模型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UNet_conditional</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c_in=<span class="number">3</span>, c_out=<span class="number">3</span>, time_dim=<span class="number">256</span>, num_classes=<span class="literal">None</span>, device=<span class="string">&quot;cuda&quot;</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.device = device</span><br><span class="line">        self.time_dim = time_dim</span><br><span class="line">        self.inc = DoubleConv(c_in, <span class="number">64</span>)</span><br><span class="line">        self.down1 = Down(<span class="number">64</span>, <span class="number">128</span>)</span><br><span class="line">        self.sa1 = SelfAttention(<span class="number">128</span>, <span class="number">32</span>)</span><br><span class="line">        self.down2 = Down(<span class="number">128</span>, <span class="number">256</span>)</span><br><span class="line">        self.sa2 = SelfAttention(<span class="number">256</span>, <span class="number">16</span>)</span><br><span class="line">        self.down3 = Down(<span class="number">256</span>, <span class="number">256</span>)</span><br><span class="line">        self.sa3 = SelfAttention(<span class="number">256</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        self.bot1 = DoubleConv(<span class="number">256</span>, <span class="number">512</span>)</span><br><span class="line">        self.bot2 = DoubleConv(<span class="number">512</span>, <span class="number">512</span>)</span><br><span class="line">        self.bot3 = DoubleConv(<span class="number">512</span>, <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">        self.up1 = Up(<span class="number">512</span>, <span class="number">128</span>)</span><br><span class="line">        self.sa4 = SelfAttention(<span class="number">128</span>, <span class="number">16</span>)</span><br><span class="line">        self.up2 = Up(<span class="number">256</span>, <span class="number">64</span>)</span><br><span class="line">        self.sa5 = SelfAttention(<span class="number">64</span>, <span class="number">32</span>)</span><br><span class="line">        self.up3 = Up(<span class="number">128</span>, <span class="number">64</span>)</span><br><span class="line">        self.sa6 = SelfAttention(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.outc = nn.Conv2d(<span class="number">64</span>, c_out, kernel_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_classes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.label_emb = nn.Embedding(num_classes, time_dim) <span class="comment"># 引入类别条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pos_encoding</span>(<span class="params">self, t, channels</span>):</span><br><span class="line">        inv_freq = <span class="number">1.0</span> / (</span><br><span class="line">            <span class="number">10000</span></span><br><span class="line">            ** (torch.arange(<span class="number">0</span>, channels, <span class="number">2</span>, device=self.device).<span class="built_in">float</span>() / channels)</span><br><span class="line">        )</span><br><span class="line">        pos_enc_a = torch.sin(t.repeat(<span class="number">1</span>, channels // <span class="number">2</span>) * inv_freq)</span><br><span class="line">        pos_enc_b = torch.cos(t.repeat(<span class="number">1</span>, channels // <span class="number">2</span>) * inv_freq)</span><br><span class="line">        pos_enc = torch.cat([pos_enc_a, pos_enc_b], dim=-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> pos_enc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, t, y</span>):</span><br><span class="line">        t = t.unsqueeze(-<span class="number">1</span>).<span class="built_in">type</span>(torch.<span class="built_in">float</span>)</span><br><span class="line">        t = self.pos_encoding(t, self.time_dim) <span class="comment"># 引入时间embedding</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            t += self.label_emb(y)  <span class="comment"># 引入条件embedding</span></span><br><span class="line"></span><br><span class="line">        x1 = self.inc(x)</span><br><span class="line">        x2 = self.down1(x1, t)</span><br><span class="line">        x2 = self.sa1(x2)</span><br><span class="line">        x3 = self.down2(x2, t)</span><br><span class="line">        x3 = self.sa2(x3)</span><br><span class="line">        x4 = self.down3(x3, t)</span><br><span class="line">        x4 = self.sa3(x4)</span><br><span class="line"></span><br><span class="line">        x4 = self.bot1(x4)</span><br><span class="line">        x4 = self.bot2(x4)</span><br><span class="line">        x4 = self.bot3(x4)</span><br><span class="line"></span><br><span class="line">        x = self.up1(x4, x3, t)</span><br><span class="line">        x = self.sa4(x)</span><br><span class="line">        x = self.up2(x, x2, t)</span><br><span class="line">        x = self.sa5(x)</span><br><span class="line">        x = self.up3(x, x1, t)</span><br><span class="line">        x = self.sa6(x)</span><br><span class="line">        output = self.outc(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h2 id="Improved-DDPM"><a href="#Improved-DDPM" class="headerlink" title="Improved DDPM"></a>Improved DDPM</h2><p>关键点：</p><ul><li>学习方差</li><li>consine schedule作为噪声策略</li><li>importance sampling</li></ul><p>反向过程的方差为前后向过程的插值，其中$v$为要学习参数。<br>$$\sum_\theta(x_t, t)&#x3D;exp(vlog\beta_t+(1-v)log\widetilde{\beta_t})$$</p><p>损失函数如下，其中$L_{simple}$指导均值，$L_{vlb}$指导方差。<br>$$L_{hybrid}&#x3D;L_{simple}+\lambda L_{vlb}$$</p><p>Improtance sampling使学习曲线变得更加平滑。</p><h2 id="Diffusion-beats-GAN"><a href="#Diffusion-beats-GAN" class="headerlink" title="Diffusion beats GAN"></a>Diffusion beats GAN</h2><p>这篇文章的作者做了大量的消融实验，改进了网络结构和一些超参数的设置。<br><img src="/images/dbgan.png"><br><img src="/images/dbgan2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DDPM&quot;&gt;&lt;a href=&quot;#DDPM&quot; class=&quot;headerlink&quot; title=&quot;DDPM&quot;&gt;&lt;/a&gt;DDPM&lt;/h2&gt;&lt;p&gt;两个过程——前向过程和反向过程，前向过程是一个高斯核马尔可夫链，实现对数据加噪：&lt;/p&gt;
&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="AI-生成模型" scheme="http://jiangmmh.github.io/categories/AI-%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="diffusion" scheme="http://jiangmmh.github.io/tags/diffusion/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客并托管到githubpage</title>
    <link href="http://jiangmmh.github.io/2023/11/03/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%89%98%E7%AE%A1%E5%88%B0githubpage/"/>
    <id>http://jiangmmh.github.io/2023/11/03/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%89%98%E7%AE%A1%E5%88%B0githubpage/</id>
    <published>2023-11-03T01:32:11.000Z</published>
    <updated>2023-11-05T07:40:25.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要搭建一个个人博客"><a href="#为什么要搭建一个个人博客" class="headerlink" title="为什么要搭建一个个人博客"></a>为什么要搭建一个个人博客</h3><p>首先，我希望有一个属于自己的内容发布载体，来记录自己所学、所思、所遇和所感，不知多年后回看当时的文字会是何种感受，let we see.<br>其次呢，自己的一些不成熟的文字并不适合传播给大众，因此相比知乎、CSDN的等平台，一个相对私密的个人博客显然是更好的选择。</p><h3 id="Hexo搭建静态博客"><a href="#Hexo搭建静态博客" class="headerlink" title="Hexo搭建静态博客"></a>Hexo搭建静态博客</h3><p>首先安装<code>node.js</code>, <code>git</code>。<br>Hexo是一个简单但功能强大的静态博客框架，首先安装 <a href="https://hexo.io/">Hexo</a> ，这里需要使用<a href="https://www.npmjs.com/">npm</a>。<br><img src="/images/hexo.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure><p>创建一个静态博客：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ cd &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>文件结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- scaffolds： 文本模板文件</span><br><span class="line">- source：博文等资源文件</span><br><span class="line">- themes：主题文件</span><br><span class="line">- _config.yml：站点配置文件</span><br><span class="line">- package.json：应用数据</span><br></pre></td></tr></table></figure><p>选择自己喜欢的主题安装：<a href="https://hexo.io/themes/">Hexo主题</a>。<br>这里我选择了简洁的<a href="https://github.com/tufu9441/maupassant-hexo">maupassant</a>主题。</p><p>使用命令<code>hexo s</code>来查看主题是否配置完成。</p><p>具体hexo的配置方法见<a href="https://hexo.io//docs/">Hexo文档</a>和具体主题的文档。</p><h3 id="将静态博客部署到GithubPage"><a href="#将静态博客部署到GithubPage" class="headerlink" title="将静态博客部署到GithubPage"></a>将静态博客部署到GithubPage</h3><p>首先需要有一个Github账号，然后确保本机能使用git连接github服务器，这里需要将本机的ssh公钥上传至github，具体方法见他人博客。</p><p>创建一个新的Github仓库，仓库名必须为<code>&lt;your user name&gt;.github.io </code>，自行站点文件和该仓库的连接。配置GithubPage的详细方法见<a href="https://docs.github.com/en/pages">GithubPage文档</a>。</p><p>然后运行<code>hexo g</code>生成静态站点，<code>hexo d</code>将博客部署到GithubPage，稍等片刻就可以在浏览器中访问网址<code>&lt;github user name&gt;.github.io</code>来访问自己的博客了。</p><h3 id="一些简单的使用方法"><a href="#一些简单的使用方法" class="headerlink" title="一些简单的使用方法"></a>一些简单的使用方法</h3><blockquote><p>每次更新文本后需要使用<code>hexo g &amp; hexo d</code>来重新生成部署。</p></blockquote><p>新建博文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;name&gt;</span><br></pre></td></tr></table></figure><p>新建page：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;name&gt;</span><br></pre></td></tr></table></figure><p>该命令会在<code>source</code>目录下生成page目录和一个<code>index.md</code>，将<code>index.md</code>的header中添加<code>layout: page</code>，并填入相应的内容即可在博客上显示新的page。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为什么要搭建一个个人博客&quot;&gt;&lt;a href=&quot;#为什么要搭建一个个人博客&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭建一个个人博客&quot;&gt;&lt;/a&gt;为什么要搭建一个个人博客&lt;/h3&gt;&lt;p&gt;首先，我希望有一个属于自己的内容发布载体，来记录自己所学、所</summary>
      
    
    
    
    <category term="网站-个人博客" scheme="http://jiangmmh.github.io/categories/%E7%BD%91%E7%AB%99-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="blog" scheme="http://jiangmmh.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>送东阳马生序</title>
    <link href="http://jiangmmh.github.io/2023/11/03/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F/"/>
    <id>http://jiangmmh.github.io/2023/11/03/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F/</id>
    <published>2023-11-03T01:15:58.000Z</published>
    <updated>2023-11-03T08:04:18.967Z</updated>
    
    <content type="html"><![CDATA[<p>宋濂</p><p>余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。<strong>天大寒，砚冰坚，手指不可屈伸，弗之怠</strong>。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道，又患无砚师、名人与游，尝趋百里外，从乡之先达执经叩问。<strong>先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻</strong>。当余之从师也，负箧曳屣，行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四肢僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅主人，日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴珠缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，煜然若神人；余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。<strong>其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉</strong>！东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，譔长书以为贽，辞甚畅达，与之论辩，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣！其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知余者哉！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;宋濂&lt;/p&gt;
&lt;p&gt;余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。&lt;strong&gt;天大寒，砚冰坚，手指不可屈伸，弗之怠&lt;/strong&gt;。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道，又患无砚师、名人与游，尝趋百</summary>
      
    
    
    
    <category term="文化-诗词" scheme="http://jiangmmh.github.io/categories/%E6%96%87%E5%8C%96-%E8%AF%97%E8%AF%8D/"/>
    
    
    <category term="诗词" scheme="http://jiangmmh.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>沁园春·雪</title>
    <link href="http://jiangmmh.github.io/2023/11/02/%E8%AF%97%E6%AD%8C-%E6%B5%8B%E8%AF%95/"/>
    <id>http://jiangmmh.github.io/2023/11/02/%E8%AF%97%E6%AD%8C-%E6%B5%8B%E8%AF%95/</id>
    <published>2023-11-02T02:58:39.000Z</published>
    <updated>2023-11-03T08:03:37.308Z</updated>
    
    <content type="html"><![CDATA[<p>北国风光，千里冰封，万里雪飘。<br>望长城内外，惟余莽莽；大河上下，顿失滔滔。<br>山舞银蛇，原驰蜡象，欲与天公试比高。<br>须晴日，看红装素裹，分外妖娆。<br>江山如此多娇，引无数英雄竞折腰。<br>惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。<br>一代天骄，成吉思汗，只识弯弓射大雕。<br>俱往矣，数风流人物，还看今朝。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;北国风光，千里冰封，万里雪飘。&lt;br&gt;望长城内外，惟余莽莽；大河上下，顿失滔滔。&lt;br&gt;山舞银蛇，原驰蜡象，欲与天公试比高。&lt;br&gt;须晴日，看红装素裹，分外妖娆。&lt;br&gt;江山如此多娇，引无数英雄竞折腰。&lt;br&gt;惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。&lt;br&gt;一代天骄，成吉</summary>
      
    
    
    
    <category term="文化-诗词" scheme="http://jiangmmh.github.io/categories/%E6%96%87%E5%8C%96-%E8%AF%97%E8%AF%8D/"/>
    
    
    <category term="诗词" scheme="http://jiangmmh.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jiangmmh.github.io/2023/11/01/hello-world/"/>
    <id>http://jiangmmh.github.io/2023/11/01/hello-world/</id>
    <published>2023-11-01T10:33:16.928Z</published>
    <updated>2023-11-01T10:28:42.739Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
